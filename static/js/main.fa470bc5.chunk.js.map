{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","components/Aboutus.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","placeholder","onClick","toggleMode","htmlFor","Textform","useState","text","setText","style","color","label","split","filter","element","length","value","backgroundColor","onChange","event","target","rows","disabled","newText","toUpperCase","showAlert","toLowerCase","Ntext","join","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","slice","defaultProps","Alert","height","alert","role","word","lower","charAt","capitalize","msg","Aboutus","darkMode","App","setMode","setAlert","body","message","setTimeout","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fa470bc5.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n// import Aboutus from './Aboutus'  \r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n<>\r\n  <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/Textform\">{props.title}</Link>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            \r\n            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/Aboutus\">About Us</Link>\r\n          </li>\r\n        </ul>\r\n        <form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form>\r\n        \r\n    </div>\r\n  </div>\r\n</nav>\r\n<div className=\"container row\">\r\n  <p className=\"col-sm-9 \"></p>\r\n<div className={`form-check form-switch text-${props.mode ==='light'?'dark':'light'} col-sm-3`}>\r\n          <input className=\"form-check-input align-right \" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode ==='light'?\"Enable Dark Mode\":\"Enable Light Mode\"}</label>\r\n        </div>\r\n        </div>\r\n</>\r\n    )\r\n}\r\nNavbar.propTypes={title: PropTypes.string,}\r\n\r\nNavbar.defaultProps ={\r\n    title: 'set title here',\r\n}","import React, {useState} from 'react'\r\n// import validator from  'validator'\r\n\r\n\r\n\r\nexport default function Textform(props) {\r\n  \r\n\r\n  const handleUpClick = ()=>{\r\n    let newText = text.toUpperCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to Upper Case\", \"success\");\r\n  }\r\n\r\n  const handleFUpClick = ()=>{\r\n    let newText = text.slice(0,1).toUpperCase()+text.slice(1,text.length);\r\n    setText(newText)\r\n    props.showAlert(\"Converted to First Letter Upper Case\", \"success\");\r\n  }\r\n  \r\n  const handleLowClick = ()=>{\r\n    let newText = text.toLowerCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to Lower Case\", \"success\");\r\n  }\r\n\r\n  const handleCopy = () => {\r\n    var text = document.getElementById('textutilsAria');\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    document.getSelection().removeAllRanges();\r\n    props.showAlert(\"Copied to Clipbord\", \"success\");\r\n    }\r\n\r\n  const handleExtraSpaces = () => {\r\n      let Ntext = text.split(/[ ]+/);\r\n      setText(Ntext.join(\" \"))\r\n      props.showAlert(\"Extra Space has been Removed \", \"success\");\r\n  }\r\n\r\n  const handleClear=()=>{\r\n    let newText =\"\";\r\n    setText(newText)\r\n    props.showAlert(\"Text Cleared \", \"success\");\r\n  }\r\n       \r\n\r\n  const handleOnChange = (event)=>{\r\n    setText(event.target.value)\r\n  }\r\n\r\n  const [text, setText]= useState('');\r\n    return (\r\n  <>\r\n    <div className=\"container\" style={{color:props.mode === 'dark'?'white':'black'}}>\r\n      <div className=\" my-4\">\r\n        <div className=\"mb-3 my-2 \">\r\n          <div className=\"row\">\r\n            <label label htmlFor=\"exampleFormControlTextarea1\" className=\"form-labe\"><h1>Text Utility</h1></label>\r\n            <p className=\"col-sm-6\"><b>{text.split(\" \").filter((element)=>{return element.length!==0}).length}</b> Words and <b>{text.length}</b> characters</p>\r\n            <p className=\"col-sm-6\"><b>{0.008*text.split(\" \").filter((element)=>{return element.length!==0}).length} </b>Minuts Read</p>\r\n          </div>\r\n            <textarea className=\"form-control\" value={text} style={{color:props.mode === 'dark'?'white':'black', backgroundColor:props.mode === 'dark'?'#495057':'#e8edf3'}} onChange={handleOnChange} id=\"textutilsAria\" rows=\"7\" placeholder=\"Enter Text Here....\"></textarea>\r\n        \r\n           \r\n        <div className=\"my-2 col-sm-8\">\r\n          <button className=\"btn btn-info my-1\" disabled={text.length===0} onClick={handleUpClick}>All Uppercase</button>\r\n          <button className=\"btn btn-info mx-2 my-1\" disabled={text.length===0} onClick={handleLowClick}>Lowercase</button>\r\n          <button className=\"btn btn-info mx-2 my-1\" disabled={text.length===0} onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n          <button className=\"btn btn-info mx-2 my-1\" disabled={text.length===0} onClick={handleCopy}>Copy Text</button>\r\n          \r\n        </div>\r\n        <div className=\" col-sm-8\">\r\n          <button className=\"btn btn-info my-1\" disabled={text.length===0} onClick={handleFUpClick}>First Letter Uppercase</button>  \r\n           <button className=\"btn btn-info mx-2 my-1\" disabled={text.length===0} onClick={handleClear}>Clear Text</button>\r\n          \r\n        </div>\r\n        \r\n        <div className=\" my-2 \">\r\n          <h1>Preview</h1>\r\n          <p>{text.length>0?text:\"Enter text in the textbox to preview it here.....\"}</p>\r\n        </div>\r\n      </div>\r\n     \r\n      </div>\r\n    </div>\r\n  </>\r\n)\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+ lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'65px'}}>\r\n        {\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}!</strong> {props.alert.msg}...\r\n                \r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import React,{useState} from 'react'\r\n\r\nexport default function Aboutus(props) {\r\n  \r\n    // const[darkMode,setdarkMode]= useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n\r\n    // })\r\n    // const [btnText,setBtnText]=useState(\"Enable Dark Mode \")\r\n    // const [btnColor,setBtnColor]=useState({ \r\n        \r\n    //     color:'white',\r\n    //     backgroundColor:'black'\r\n    // })\r\n\r\n    // let toggelStyle =() =>{\r\n       \r\n    //     if(darkMode.color === 'black'){\r\n    //         setdarkMode({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             // border:'1px solid white'\r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\");\r\n    //         // setBtnColor({color:'black',backgroundColor:'white',border:'1px solid black'});\r\n    //     }\r\n    //     else{\r\n    //         setdarkMode({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white',\r\n    //             // border:'1px solid black'\r\n    //         })\r\n    //         setBtnText(\"Enable Dark Mode\");\r\n            // setBtnColor({color:'white',backgroundColor:'black'});\r\n            // }\r\n        // }\r\n\r\n    let darkMode ={\r\n        color: props.mode === 'dark'?'white':'black',\r\n        backgroundColor: props.mode === 'dark'?'#495057':'#e8edf3'\r\n    }\r\n    return (\r\n<>\r\n    <div className=\"container\" style={darkMode}>\r\n        <h1 className=\"my-4\">Bloger About Us</h1>\r\n        <div className=\"accordion\" style={darkMode} id=\"accordionExample\">\r\n            <div className=\"accordion-item\" style={darkMode}>\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" style={darkMode} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                    Linkify take a piece of text and a regular expression and turns all of the regex matches in the text into clickable links. This class stores an RFC 822-like name, address, and comment, and provides methods to convert them to quoted strings.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={darkMode}>\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={darkMode} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={darkMode}>\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={darkMode} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n        </div>\r\n       \r\n    \r\n</> \r\n    )\r\n}\r\n","import './App.css';\n\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Aboutus from './components/Aboutus';\n\n\nfunction App() {\n  \n  const[mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  document.body.style.backgroundColor=mode === 'dark'?'#495057':'#e8edf3'\n\n  const showAlert =(message, type)=>{\n      setAlert({\n        msg:message,\n        type:type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 2000);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#495057'\n      showAlert(\"Dark mode has been enabled\",\"success\");\n    }\n    else{ \n    setMode('light');\n    document.body.style.backgroundColor='#e8edf3'\n    showAlert(\"Light mode has been enabled\",\"success\");\n    }\n  }\n  return (\n    \n  < >\n  \n  <Router>\n   <Navbar title=\"Bloger\" mode ={mode} toggleMode={toggleMode}/>\n   <Alert alert={alert}/>\n   <Switch>\n          <Route exact path=\"/aboutus\"> \n           <Aboutus mode={mode}/>\n          </Route>\n         \n          <Route exact path=\"/\">\n          <Textform mode={mode} showAlert={showAlert}/> \n          </Route>\n        </Switch>\n       \n   </Router>\n \n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}